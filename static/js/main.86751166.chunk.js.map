{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["simulationTypes","xkcd","glider","smallExploder","exploder","tenCellRow","App","props","width","height","Sketch","p","setup","createCanvas","init","draw","background","state","isRunning","generate","frameRate","i","columns","j","rows","board","fill","stroke","rect","gridSize","mouseClicked","Math","floor","mouseX","mouseY","Number","Boolean","myRef","React","createRef","canvasType","this","Array","next","midPointX","midPointY","forEach","point","x","y","neighbors","temp","setState","event","speed","parseInt","target","value","size","setTimeout","reset","myP5","p5","current","className","id","ref","onClick","startGeneration","type","min","max","onChange","updateGridSize","updateSpeed","updateCanvasType","Component","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86751166.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport p5 from 'p5';\n\n/**\n * TODO:\n * [ ] Fix edge behaviour bug\n * [ ] Stop generation when all cells are dead or when equilibrium state is reached\n * [ ] Show iteration count\n * [ ] Add an About section\n * [ ] Time travel feature\n * [ ] Ability to Import/Export Simulations\n * [ ] Add more simulations from https://bitstorm.org/gameoflife/\n * [ ] Refactor :p\n */\n\n\n// TODO: Move to own class\nconst simulationTypes = {\n  xkcd: [[-1, -4], [0, -4], [1, -4],\n  [-1, -3], [1, -3],\n  [-1, -2], [1, -2],\n  [0, -1],\n  [-3, 0], [-1, 0], [0, 0], [1, 0],\n  [-2, 1], [0, 1], [2, 1],\n  [0, 2], [3, 2],\n  [-1, 3], [1, 3],\n  [-1, 4], [1, 4]],\n  glider: [[0, -1],\n  [1, 0],\n  [-1, 1], [0, 1], [1, 1]],\n  smallExploder: [[0, -2],\n  [-1, -1], [0, -1], [1, -1],\n  [-1, 0],\n  [1, 0], [0, 1]],\n  exploder: [[-2, -2], [0, -2], [2, -2],\n  [-2, -1], [2, -1],\n  [-2, 0], [2, 0],\n  [-2, 1], [2, 1],\n  [-2, 2], [0, 2], [2, 2]],\n  tenCellRow: [[-4, 0], [-3, 0], [-2, 0], [-1, 0], [1, 0], [0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0]]\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.myRef = React.createRef()\n    this.state = { isRunning: false, frameRate: 5, gridSize: 15, canvasType: 'blank' }\n  }\n\n  columns;\n  rows;\n  board;\n  next;\n  width = 550;\n  height = 550;\n\n  Sketch = (p) => {\n\n    p.setup = () => {\n      p.createCanvas(this.width, this.height);\n      this.init();\n    };\n\n    p.draw = () => {\n      p.background(255);\n      if (this.state.isRunning) {\n        this.generate()\n        p.frameRate(this.state.frameRate);\n      } else {\n        p.frameRate(60)\n      }\n      for (let i = 0; i < this.columns; i++) {\n        for (let j = 0; j < this.rows; j++) {\n          if ((this.board[i][j] === 1)) {\n            //p.fill(0);\n            p.fill(237, 34, 93);\n          }\n          else {\n            p.fill(255);\n          }\n          p.stroke(0);\n          p.rect(i * this.state.gridSize, j * this.state.gridSize, this.state.gridSize - 0.5, this.state.gridSize - 0.5);\n        }\n      }\n    };\n    p.mouseClicked = () => {\n      if (!this.state.isRunning) {\n        let i = Math.floor(p.mouseX / this.state.gridSize);\n        let j = Math.floor(p.mouseY / this.state.gridSize);\n        // Temporary fix to handle this event being triggered even when the mouse click is outside the canvas\n        if (i < this.rows && j < this.columns) {\n          this.board[i][j] = Number(!Boolean(this.board[i][j]))\n        }\n      }\n    }\n  };\n\n  init() {\n    // Calculate columns and rows\n    this.columns = Math.floor(this.width / this.state.gridSize);\n    this.rows = Math.floor(this.height / this.state.gridSize);\n    // Wacky way to make a 2D array is JS\n    this.board = new Array(this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      this.board[i] = (new Array(this.rows)).fill(0);\n    }\n    // Going to use multiple 2D arrays and swap them\n    this.next = new Array(this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      this.next[i] = (new Array(this.rows)).fill(0);\n    }\n    if (this.state.canvasType !== 'blank') {\n      let midPointX = Math.floor(this.columns / 2)\n      let midPointY = Math.floor(this.rows / 2)\n      let points = simulationTypes[this.state.canvasType]\n      points.forEach((point) => {\n        this.board[midPointX + point[0]][midPointY + point[1]] = 1\n      });\n    }\n  }\n\n  generate() {\n    // Loop through every spot in our 2D array and check spots neighbors\n    for (let x = 1; x < this.columns - 1; x++) {\n      for (let y = 1; y < this.rows - 1; y++) {\n        // Add up all the states in a 3x3 surrounding grid\n        let neighbors = 0;\n        for (let i = -1; i <= 1; i++) {\n          for (let j = -1; j <= 1; j++) {\n            neighbors += this.board[x + i][y + j];\n          }\n        }\n\n        // A little trick to subtract the current cell's state since\n        // we added it in the above loop\n        neighbors -= this.board[x][y];\n        // Rules of Life\n        if ((this.board[x][y] === 1) && (neighbors < 2)) {\n          this.next[x][y] = 0;           // Loneliness\n        }\n        else if ((this.board[x][y] === 1) && (neighbors > 3)) {\n          this.next[x][y] = 0;           // Overpopulation\n        }\n        else if ((this.board[x][y] === 0) && (neighbors === 3)) {\n          this.next[x][y] = 1;           // Reproduction\n        }\n        else {\n          this.next[x][y] = this.board[x][y]; // Stasis\n        }\n      }\n    }\n\n    // Swap!\n    let temp = this.board;\n    this.board = this.next;\n    this.next = temp;\n  }\n\n  startGeneration() {\n    this.setState({ isRunning: !this.state.isRunning })\n  }\n\n  updateSpeed(event) {\n    let speed = Number.parseInt(event.target.value)\n    this.setState({ frameRate: speed })\n  }\n\n  updateGridSize(event) {\n    let size = Number.parseInt(event.target.value)\n    this.setState({ gridSize: size })\n    setTimeout(() => this.reset(), 0)\n  }\n\n  updateCanvasType(event) {\n    this.setState({ canvasType: event.target.value })\n    setTimeout(() => this.reset(), 0)\n  }\n\n  reset() {\n    this.setState({ isRunning: false })\n    this.init()\n  }\n\n  componentDidMount() {\n    this.myP5 = new p5(this.Sketch, this.myRef.current)\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <span className=\"title\">Conway's Game of Life</span>\n        <div id=\"canvas\" className=\"canvas\" ref={this.myRef}></div>\n        <div className=\"config-panel\">\n          <span>\n            <button onClick={() => this.startGeneration()} >\n              {this.state.isRunning ? 'STOP' : 'START'}\n            </button>\n            <button onClick={() => this.reset()} >\n              RESET\n            </button>\n          </span>\n          <span>\n            Grid Size: {this.state.gridSize}\n            <span>\n              <input type=\"range\" value={this.state.gridSize}\n                min=\"5\" max=\"50\" id=\"sizeRange\"\n                onChange={(event) => this.updateGridSize(event)}></input>\n            </span>\n          </span>\n          <span>\n            Speed: {this.state.frameRate} fps\n            <span>\n              <input type=\"range\" value={this.state.frameRate}\n                min=\"1\" max=\"60\" id=\"speedRange\"\n                onChange={(event) => this.updateSpeed(event)}></input>\n            </span>\n          </span>\n          <span>\n            Simulation Type:\n            <span>\n              <select value={this.state.canvasType} onChange={(event) => this.updateCanvasType(event)}>\n                <option value=\"blank\">Blank</option>\n                <option value=\"xkcd\">XKCD RIP John Conway</option>\n                <option value=\"glider\">Glider</option>\n                <option value=\"smallExploder\">Small Exploder</option>\n                <option value=\"exploder\">Exploder</option>\n                <option value=\"tenCellRow\">10 Cell Row</option>\n              </select>\n            </span>\n          </span>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}